<?xml version='1.0' encoding='UTF-8'?>

<bag xmlns:float="http://www.w3.org/2001/XMLSchema#float" xmlns:int="http://www.w3.org/2001/XMLSchema#int" xmlns:unsignedInt="http://www.w3.org/2001/XMLSchema#unsignedInt" xmlns:unsignedLong="http://www.w3.org/2001/XMLSchema#unsignedLong" int:version="6">
 <issues>
  <issue>
   <unsignedInt:flags>65</unsignedInt:flags>
   <id>issue_system_functions</id>
   <int:severity>1</int:severity>
   <text>System function call(s) in the &lt;a href=&quot;https://software.intel.com/en-us/articles/intel-advisor-xe-2016-vectorization-advisor-glossary&quot;&gt;loop body&lt;/a&gt; may prevent the compiler from vectorizing the loop. </text>
   <title>System function call(s) present </title>
   <attributes>
    <float:severity>1</float:severity>
   </attributes>
   <parameters/>
   <recommendations>
    <recommendation>
     <int:confidence>1</int:confidence>
     <unsignedInt:flags>8</unsignedInt:flags>
     <id>rec_system_functions_move_c</id>
     <text>Typically system function or subroutine calls cannot be auto-vectorized; even a print statement is sufficient to prevent vectorization. To fix: Avoid using system function calls in loops. </text>
     <title>Remove system function call(s) inside loop </title>
     <attributes>
      <float:confidence>1</float:confidence>
     </attributes>
     <parameters/>
    </recommendation>
   </recommendations>
   <unsignedLong:rowKey>176</unsignedLong:rowKey>
  </issue>
  <issue>
   <unsignedInt:flags>65</unsignedInt:flags>
   <id>issue_system_functions</id>
   <int:severity>1</int:severity>
   <text>System function call(s) in the &lt;a href=&quot;https://software.intel.com/en-us/articles/intel-advisor-xe-2016-vectorization-advisor-glossary&quot;&gt;loop body&lt;/a&gt; may prevent the compiler from vectorizing the loop. </text>
   <title>System function call(s) present </title>
   <attributes>
    <float:severity>1</float:severity>
   </attributes>
   <parameters/>
   <recommendations>
    <recommendation>
     <int:confidence>1</int:confidence>
     <unsignedInt:flags>8</unsignedInt:flags>
     <id>rec_system_functions_move_c</id>
     <text>Typically system function or subroutine calls cannot be auto-vectorized; even a print statement is sufficient to prevent vectorization. To fix: Avoid using system function calls in loops. </text>
     <title>Remove system function call(s) inside loop </title>
     <attributes>
      <float:confidence>1</float:confidence>
     </attributes>
     <parameters/>
    </recommendation>
   </recommendations>
   <unsignedLong:rowKey>214</unsignedLong:rowKey>
  </issue>
  <issue>
   <unsignedInt:flags>65</unsignedInt:flags>
   <id>issue_indirect_call</id>
   <int:severity>1</int:severity>
   <text>Indirect function call(s) in the &lt;a href=&quot;https://software.intel.com/en-us/articles/intel-advisor-xe-2016-vectorization-advisor-glossary&quot;&gt;loop body&lt;/a&gt; are preventing the compiler from vectorizing the loop. &lt;br&gt; Indirect calls, sometimes called &lt;em&gt;indirect jumps&lt;/em&gt;, get the callee address from a register or memory; direct calls get the callee address from an argument. Even if you force loop vectorization, indirect calls remain serialized. </text>
   <title>Indirect function call(s) present </title>
   <attributes>
    <float:severity>1</float:severity>
   </attributes>
   <parameters/>
   <recommendations>
    <recommendation>
     <int:confidence>1</int:confidence>
     <unsignedInt:flags>8</unsignedInt:flags>
     <id>rec_indirect_call_move_c</id>
     <text>Indirect function or subroutine calls cannot be vectorized. To fix: Avoid using indirect calls in loops. </text>
     <title>Remove indirect call(s) inside loop </title>
     <attributes>
      <float:confidence>1</float:confidence>
     </attributes>
     <parameters/>
    </recommendation>
    <recommendation>
     <int:confidence>1</int:confidence>
     <unsignedInt:flags>8</unsignedInt:flags>
     <id>rec_indirect_call_proxy_c</id>
     <text>Calls to virtual methods are always indirect because the function address is calculated during runtime. Do the following to fix: &lt;ul&gt; &lt;li&gt; Force vectorization of the &lt;a href=&quot;https://software.intel.com/en-us/articles/intel-advisor-xe-2016-vectorization-advisor-glossary&quot;&gt;source loop&lt;/a&gt; using SIMD instructions and/or create a SIMD version of the function(s) using a &lt;a href=&quot;https://software.intel.com/en-us/articles/intel-advisor-xe-2016-vectorization-advisor-glossary&quot;&gt;directive&lt;/a&gt;: &lt;table&gt; &lt;tr&gt; &lt;th&gt; Target &lt;/th&gt; &lt;th&gt; Directive &lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt; Source loop &lt;/td&gt; &lt;td&gt; #pragma simd or #pragma omp simd &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt; Inner function definition or declaration &lt;/td&gt; &lt;td&gt; #pragma omp declare simd &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;li&gt; Update to Intel Compiler &lt;div class=&quot;inplace_sample&quot;&gt;17.x&lt;/div&gt; or higher. Or replace the virtual method with a direct function call. &lt;/ul&gt; &lt;br/&gt;&lt;b&gt;Example:&lt;/b&gt; &lt;br/&gt; Original code: &lt;div class=&quot;sample&quot;&gt; struct A {&lt;br/&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;virtual double foo(double x) { return x+1; }&lt;br/&gt; };&lt;br/&gt; &lt;br/&gt; struct B : public A {&lt;br/&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;double foo(double x) override { return x-1; }&lt;br/&gt; };&lt;br/&gt; &lt;br/&gt; . . .&lt;br/&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;A* obj = new B();&lt;br/&gt; &lt;br/&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;double sum = 0.0;&lt;br/&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;#pragma omp simd reduction(+:sum)&lt;br/&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;for (int k = 0; k &lt; N; ++k) {&lt;br/&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;strong&gt;// virtual indirect call&lt;/strong&gt;&lt;br/&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;strong&gt;sum += obj-&gt;foo(a[k]);&lt;/strong&gt;&lt;br/&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt; . . . &lt;/div&gt; Revised code: &lt;div class=&quot;sample&quot;&gt; struct A {&lt;br/&gt; &lt;strong&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;// Intel Compiler 17.x or higher could vectorize call to virtual method&lt;br/&gt;&lt;/strong&gt; &lt;strong&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;#pragma omp declare simd&lt;br/&gt;&lt;/strong&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;virtual double foo(double x) { return x+1; }&lt;br/&gt; };&lt;br/&gt; . . . &lt;br/&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;sum = 0.0;&lt;br/&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;#pragma omp simd reduction(+:sum)&lt;br/&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;for (int k = 0; k &lt; N; ++k) {&lt;br/&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;strong&gt;// step for Intel Compiler 16.x or lower:&lt;/strong&gt;&lt;br/&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;strong&gt;// if you know the method to be called,&lt;/strong&gt;&lt;br/&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;strong&gt;// replace virtual call with direct one&lt;/strong&gt;&lt;br/&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;strong&gt;sum += ((B*)obj)-&gt;B::foo(a[k]);&lt;/strong&gt;&lt;br/&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt; . . . &lt;/div&gt; &lt;b&gt;Read More:&lt;/b&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;C++/17/index.htm#GUID-B847FED8-4D82-4250-A241-8755134F210F.htm&quot;&gt;omp declare simd&lt;/a&gt;, &lt;a href=&quot;C++/17/index.htm#GUID-4D8CDB9C-8A96-4CB2-B5E5-3D81003FE4FF.htm&quot;&gt;omp simd&lt;/a&gt;, &lt;a href=&quot;C++/17/index.htm#GUID-1EA04294-988E-4152-B584-B028FD6FAC48.htm&quot;&gt;simd&lt;/a&gt; &lt;li&gt;&lt;a href=&quot;https://software.intel.com/en-us/articles/getting-started-with-intel-composer-xe-2013-compiler-pragmas-and-directives&quot;&gt;Getting Started with Intel Compiler Pragmas and Directives&lt;/a&gt; and &lt;a href=&quot;https://software.intel.com/en-us/vectorization-resources-advisor&quot;&gt;Vectorization Resources for Intel&amp;reg; Advisor Users&lt;/a&gt; &lt;/ul&gt; </text>
     <title>Replace call(s) to virtual method with direct call(s) </title>
     <attributes>
      <float:confidence>1</float:confidence>
     </attributes>
     <parameters/>
    </recommendation>
   </recommendations>
   <unsignedLong:rowKey>214</unsignedLong:rowKey>
  </issue>
 </issues>
 <traits/>
</bag>
